16 bit fixed point FIR filter for the Raspberry Pi GPU.

How to setup the RPi:
https://github.com/hermanhermitage/videocoreiv/wiki/VideoCore-IV-Kernels-under-Linux
More background info:
https://github.com/hermanhermitage/videocoreiv/wiki

Use tinyasm on the RPi itself, not on an x86 PC. Otherwise differences in endianness will screw up the assembler output. Filter taps and filter input are interpreted Q15 fixed point format.
The full 32 bit multiplication results are accumulated. The filter result consists of bits 14-30, giving Q15 output.
With minor modification full 32-bit output or different fixed point formats are probably also possible.

Performance:
Execution time measured using "time" command.

Clock frequencies (no overclocking):
> for src in arm core h264 isp v3d uart pwm emmc pixel vec hdmi dpi ; do \
>     echo -e "$src:\t$(vcgencmd measure_clock $src)" ; \
> done
arm:    frequency(45)=700000000
core:   frequency(1)=250000000
h264:   frequency(28)=250000000
isp:    frequency(42)=250000000
v3d:    frequency(43)=250000000
uart:   frequency(22)=3000000
pwm:    frequency(25)=0
emmc:   frequency(47)=100000000
pixel:  frequency(29)=0
vec:    frequency(10)=108000000
hdmi:   frequency(9)=0
dpi:    frequency(4)=0

"FAST" defined in firfilter.s

TEST_WITHOUT_FILTER
(Filter routine is not called at all, time needed to allocate memory and setup data)
0.16user 0.03system 0:00.25elapsed 75%CPU (0avgtext+0avgdata 456maxresident)k
TEST_1M
(1024*1024 samples, 128 taps)
0.16user 0.03system 0:00.70elapsed 27%CPU (0avgtext+0avgdata 456maxresident)k
TEST_2M
(2*1024*1024 samples, 128 taps)
0.17user 0.02system 0:01.14elapsed 16%CPU (0avgtext+0avgdata 456maxresident)k
TEST_3M
(3*1024*1024 samples, 128 taps)
0.18user 0.01system 0:01.60elapsed 11%CPU (0avgtext+0avgdata 456maxresident)k

-> Approx 2.2 million samples per second with 128 taps

